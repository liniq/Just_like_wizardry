<html>
<head>
<title>Just like wizardry</title>
<link rel="stylesheet" type="text/css" href="css/Styles.css">
<script src="js/excanvas.js" type="text/javascript"></script>
<script src="./game.js"></script>
<script src="js/renderer.js" type="text/javascript"></script>
<script src="/socket.io/socket.io.js" type="text/javascript"></script>
</head>
<body>

<div id="screen">
	<div id="floor"></div>
	<div id="ceiling"></div>
	
	<div id="minimapcontainer">
		<canvas id="minimap"></canvas>
		<canvas id="minimapobjects"></canvas>
	</div>
    <span id="chat"></span>
	<div id="party">
	    <div class="one left">
			<span id="playername2" class="name">Laur</span> <span id="playerhp2">hp: 4</span><br>
			<img id="playerportret2" class="portret" src="img/templar_assassin_hphover.png" alt="" /><br>
			<span class="yel">Action:</span> <span id="playeraction2">Defend yourself</span>
		</div>
		
		 <div class="one left">
			<span id="playername3" class="name">Markus</span> <span id="playerhp3">hp: 6</span><br>
			<img id="playerportret3" class="portret" src="img/keeper_of_the_light_hphover.png" alt="" /><br>
			<span id="playeraction3">NOT READY</span>
		</div>
		
		<div class="one left">
			<span id="playername4" class="name">Liniq</span> <span id="playerhp4">hp: 4</span><br>
			<img id="playerportret4" class="portret" src="img/life_stealer_hphover.png" alt="" /><br>
			<span class="yel">Action:</span> <span id="playeraction4">Defend yourself</span>
		</div>
	</div>
	
	<div id="ui">
	    <img class="portret" src="img/omniknight_hphover.png" alt="" />
		<div id="hero">
			<div class="name left"><span id="name">Airiz</span><br>
			<span>Skill:</span> <span id="skilldescription">heal the target 5hp</span>
			</div>
			
			
			<div class="left">
				<span>HP:</span> <span id="hitpoint">10</span><br>
				<span>Damage:</span> <span id="damage">2-4</span><br>
				<span>Defence:</span> <span id="defence">3</span><br>
			</div>
			
			<div class="but left">
				<a id="hit" href="#"><img src="img/itemcat_weapons.png" alt="" /></a>
				<a id="defend" href="#"><img src="img/itemcat_attributes.png" alt="" /></a>
				<a id="castspell" href="#"><img src="img/itemcat_support.png" alt="" /></a>
			</div>
			
			<div id="target" class="action left">
				<select id="chstarget">
					<option>Airiz</option>
					<option>Laur</option>
					<option>Markus</option>
					<option>Liniq</option>
					<option>Enemy</option>
				</select>
				<br>
				<span class="yel">Action:</span> <span id="action">Defend yourself</span>
				<input type="button" id="masterbutt"  value="request control" onclick="requestControl()" />
			</div>
			
			<div class="ready right">
				<a id="ready" class="yel" href="#">READY!</a>
				 
			</div>
		</div>
	</div>
		
</div>



<div id="debug"></div>

<script type="text/javascript">

function init() {


    initNetwork();

	drawMiniMap();

	gameCycle();

}

var socket = io();
var  nickname;

function initNetwork()
{
        // Check if nickname stored in localStorage
        if('localStorage' in window && localStorage.getItem('nickname')) {
            nickname = localStorage.getItem('nickname');
        } else {
            // If not in localStorage, prompt user for nickname
            nickname = prompt('Please enter your nickname','losos'+(new Date().getSeconds()));
            if('localStorage' in window) {
                localStorage.setItem('nickname', nickname);
            }
        }
        socket.on('id', function(sockid) {
            socket.id=sockid;
            console.log("got id "+sockid);
        });

        socket.emit('join', nickname);

        socket.on('join', function(nick) {
            $("chat").innerHTML += "<br/>" + nick +" joined the game!";
            setTimeout(clearChat,5000);
        });
        socket.on('masterChanged', function(data) {
            $("chat").innerHTML += "<br/>" + data.nick + " now controls movements!";
            console.log("my id "+ socket.id + " data id " +data.id+ " eq=" +(socket.id == data.id));
            if (socket.id == data.id)
            {
                //alert("you now control movements. Use buttons to move");
                bindKeys();
                //$('masterbutt').disabled=true;
            }
            else
            {
                document.onkeyup = null;
                document.onkeydown = null;
                //$('masterbutt').disabled=false;
            }
            setTimeout(clearChat,5000);
        });

        socket.on('leave', function(nick) {
            $("chat").innerHTML += "<br/>" + nick + " left the game!";
            setTimeout(clearChat,5000);
        });


        socket.on('move', function(data) {
            player.speed=data.s;
            player.dir = data.d;
            if (data.x) {
                player.x = data.x;
                player.y = data.y;
                player.rotDeg = data.r;

            }
        });

}

function requestControl()
{
    socket.emit('masterChanged',nickname);
}

function clearChat()
{
    $("chat").innerHTML ="";
}
// bind keyboard events to game functions (movement, etc)
function bindKeys() {

	document.onkeydown = function(e) {
		e = e || window.event;

		switch (e.keyCode) { // which key was pressed?

			case 38: // up, move player forward, ie. increase speed
				//player.speed = 1;
                    socket.emit('move', {s: 1, d: player.dir});
				break;

            case 40: // down, move player backward, set negative speed
				//player.speed = -1;
                socket.emit('move', {s: -1, d: player.dir});
				break;

			case 37: // left, rotate player left
				//player.dir = -1;
                socket.emit('move', {s: player.speed, d: -1});
				break;

			case 39: // right, rotate player right
				//player.dir = 1;
                socket.emit('move', {s: player.speed, d: 1});
				break;
		}
	};

	document.onkeyup = function(e) {
		e = e || window.event;

		switch (e.keyCode) {
			case 38:
			case 40:
				//player.speed = 0;	// stop the player movement when up/down key is released
                socket.emit('move', {s: 0, d: player.dir, x:player.x, y: player.y, r: player.rotDeg});
				break;
			case 37:
			case 39:
				//player.dir = 0;
                socket.emit('move', {s: player.speed, d: 0, x:player.x, y: player.y, r: player.rotDeg});
				break;
		}
	};
}

function updateMiniMap() {

	var miniMap = $("minimap");
	var miniMapObjects = $("minimapobjects");

	var objectCtx = miniMapObjects.getContext("2d");
	miniMapObjects.width = miniMapObjects.width;

	objectCtx.fillStyle = "red";
	objectCtx.fillRect(		// draw a dot at the current player position
		player.x * miniMapScale - 2, 
		player.y * miniMapScale - 2,
		4, 4
	);

	objectCtx.strokeStyle = "red";
	objectCtx.beginPath();
	objectCtx.moveTo(player.x * miniMapScale, player.y * miniMapScale);
	objectCtx.lineTo(
		(player.x + Math.cos(player.rot) * 4) * miniMapScale,
		(player.y + Math.sin(player.rot) * 4) * miniMapScale
	);
	objectCtx.closePath();
	objectCtx.stroke();

	for (var i=0;i<enemies.length;i++) {
		var enemy = enemies[i];

		objectCtx.fillStyle = "blue";
		objectCtx.fillRect(		// draw a dot at the enemy position
			enemy.x * miniMapScale - 2, 
			enemy.y * miniMapScale - 2,
			4, 4
		);
	}
}

function drawMiniMap() {

	// draw the topdown view minimap

	var miniMap = $("minimap");			// the actual map
	var miniMapCtr = $("minimapcontainer");		// the container div element
	var miniMapObjects = $("minimapobjects");	// the canvas used for drawing the objects on the map (player character, etc)

	miniMap.width = mapWidth * miniMapScale;	// resize the internal canvas dimensions 
	miniMap.height = mapHeight * miniMapScale;	// of both the map canvas and the object canvas
	miniMapObjects.width = miniMap.width;
	miniMapObjects.height = miniMap.height;

	var w = (mapWidth * miniMapScale) + "px" 	// minimap CSS dimensions
	var h = (mapHeight * miniMapScale) + "px"
	miniMap.style.width = miniMapObjects.style.width = miniMapCtr.style.width = w;
	miniMap.style.height = miniMapObjects.style.height = miniMapCtr.style.height = h;

	var ctx = miniMap.getContext("2d");

	ctx.fillStyle = "white";
	ctx.fillRect(0,0,miniMap.width,miniMap.height);

	// loop through all blocks on the map
	for (var y=0;y<mapHeight;y++) {
		for (var x=0;x<mapWidth;x++) {

			var wall = map[y][x];

			if (wall > 0) { // if there is a wall block at this (x,y) ...
				ctx.fillStyle = "rgb(200,200,200)";
				ctx.fillRect(				// ... then draw a block on the minimap
					x * miniMapScale,
					y * miniMapScale,
					miniMapScale,miniMapScale
				);
			}

			if (spriteMap[y][x]) {
				ctx.fillStyle = "rgb(100,200,100)";
				ctx.fillRect(
					x * miniMapScale + miniMapScale*0.25,
					y * miniMapScale + miniMapScale*0.25,
					miniMapScale*0.5,miniMapScale*0.5
				);
			}
		}
	}

	updateMiniMap();
}

setTimeout(init, 1);

</script>



</body>