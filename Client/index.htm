<html>
<head>
<title>Just like wizardry</title>
<link rel="stylesheet" type="text/css" href="css/Styles.css">
<script src="js/excanvas.js" type="text/javascript"></script>
<script src="./level.js"></script>
<script src="./objectTypes.js"></script>
<script src="./gameEngine.js"></script>
<script src="js/objectTextures.js" type="text/javascript"></script>
<script src="js/renderer.js" type="text/javascript"></script>
<script src="/socket.io/socket.io.js" type="text/javascript"></script>
</head>
<body>

<div id="screen">
	<div id="animation"></div>
	<div id="floor"></div>
	<div id="ceiling"></div>
	
	<!--
	<div id="minimapcontainer">
		<canvas id="minimap"></canvas>
		<canvas id="minimapobjects"></canvas>
	</div> -->
	
	<div id="choose">
        <span class="cyc">Choose your character or <a style="text-decoration: underline; cursor: pointer" onclick="$('choose').style.display='none'; return false;">spectate</a></span>
        <span>Your Nick: </span><input type="text" id="nickname" /><br /><br />
        <img id="Zombotron" class="disabledmorda" src="img/templar_assassin_hphover.png" name="Zombotron" />
        <img id="Lososo" class="disabledmorda" src="img/keeper_of_the_light_hphover.png" name="Lososo" /><br />
        <img id="WarGay" class="disabledmorda" src="img/life_stealer_hphover.png" name="WarGay" />
        <img id="PabloPicasso" class="disabledmorda" src="img/omniknight_hphover.png" name="PabloPicasso" />
	</div>
	
    <span id="chat"></span>
    <span id="playersinfo"></span>
	
	<div id="party">
	    <div class="one master">
			<span id="playername2" class="name">Laur</span> <span id="playerhp2">hp: 4</span><br>
			<img id="playerportret2" class="portret" src="img/templar_assassin_hphover.png" alt="" /><br>
			<span class="yel">Action:</span> <span id="playeraction2">Defend yourself</span>
		</div>
		
		 <div class="one noconnect">
			<span id="playername3" class="name">Markus</span> <span id="playerhp3">hp: 6</span><br>
			<img id="playerportret3" class="portret" src="img/keeper_of_the_light_hphover.png" alt="" /><br>
			<span id="playeraction3">NOT READY</span>
		</div>
		
		<div class="one">
			<span id="playername4" class="name">Liniq</span> <span id="playerhp4">hp: 4</span><br>
			<img id="playerportret4" class="portret" src="img/life_stealer_hphover.png" alt="" /><br>
			<span class="yel">Action:</span> <span id="playeraction4">Defend yourself</span>
		</div>
	</div>
	
	<div id="ui">
	    <img class="portret" src="img/omniknight_hphover.png" alt="" />
		<div id="hero">
			<div class="name left"><span id="name">Airiz</span><br>
			<span>Skill:</span> <span id="skilldescription">heal the target 5hp</span>
			</div>
			
			
			<div class="left">
				<span>HP:</span> <span id="hitpoint">10</span><br>
				<span>Damage:</span> <span id="damage">2-4</span><br>
				<span>Defence:</span> <span id="defence">3</span><br>
			</div>
			
			<div class="but left">
				<a id="hit" href="#"><img src="img/itemcat_weapons.png" alt="" /></a>
				<a id="defend" href="#"><img src="img/itemcat_attributes.png" alt="" /></a>
				<a id="castspell" href="#"><img src="img/itemcat_support.png" alt="" /></a>
			</div>
			
			<div id="target" class="action left">
				<span class="yel">Action:</span> <span id="action">Defend yourself</span>
				<input type="button" id="masterbutt"  value="request control" onclick="requestControl()" />
			</div>
			
			<div class="ready right">
				<a class="yel" href="#">READY!</a>
				 
			</div>
		</div>
	</div>

</div>



<div id="debug"></div>

<script type="text/javascript">
    var game = new Game(window.gameLevel,window.gameTypes);
    var ren;// = new Renderer(game,textures,$('screen'));
    var spectators =0;
function init() {
    initNetwork();
    game.on('update', render);
}

function render() {
    ren.renderCycle();
}

var socket = io();
var nickname;
    function initNetwork()
    {
        socket.on('id', function(sockid) {
            socket.id=sockid;
            //console.log("got id "+sockid);
        });

        var createClickHandler = function(arg) {
            return function() { tryJoin(arg); };
        };

        socket.on('spectatorJoin', function(data) {
            spectators = data.spectators;
            var elem = $('playersinfo');
            elem.innerHTML = "Spectators: " + spectators + ", Players: " + game.getPlayerCount();
            if (data.gameState) {
                game.load(data.gameState);
                elem.innerHTML = "Spectators: " + spectators + ", Players: " + game.getPlayerCount();

                //start
                ren = new Renderer(game,textures,$('screen'));
                game.updateEvery(Game.UPDATE_INTERVAL,0);

                $('nickname').value = 'losos'+(new Date().getSeconds());
                var characters = game.state.objects[0].characters;
                for (var charName in characters){
                    if (characters[charName].id) {
                        $(charName).className = 'disabledmorda';
                        $(charName).onclick = null;
                    } else {
                        $(charName).className = 'enabledmorda';
                        $(charName).onclick = createClickHandler(charName);
                    }
                }
                $('choose').style.display='block';
            }
        });

        socket.on('playerJoin', function(data) {
            $('choose').style.display='none';
            if (data.nick) {
                writeChatLine(data.nick +" joined the game as " + data.character+ "!");
                game.join(data);
                spectators--;
                $('playersinfo').innerHTML = "Spectators: " + spectators + ", Players: " + game.getPlayerCount();

            }
            if (data.objects) {
                game.load(data);
            }
        });
        socket.on('masterChanged', function(data) {
            writeChatLine(data.nick + " now controls movements!");
            if (socket.id == data.id)
            {
                bindKeys();
                //$('masterbutt').disabled=true;
            }
            else
            {
                document.onkeyup = null;
                document.onkeydown = null;
                //$('masterbutt').disabled=false;
            }
        });

        socket.on('leave', function(data) {
            if (!game.leave(data.id))
                spectators--;
            $('playersinfo').innerHTML = "Spectators: " + spectators + ", Players: " + game.getPlayerCount();
            if (data.nick)
                writeChatLine(data.nick + " left the game!");
        });


        socket.on('move', function(data) {
            game.actionArray.push ({
                turn: data.t,
                move: data.m
            });
            var pl = game.state.objects[0];
            pl.x = data.x;
            pl.y = data.y;
            pl.angle = data.a;
        });


        socket.emit('join');
    }

function tryJoin(character){
    var el = $('nickname');
    var nick = el.value.trim();
    if (nick.length<3){
        alert("type nick!");
        el.focus();
        return;
    }
    socket.emit('join',{character:character,nick:nick});
}

function requestControl()
{
    socket.emit('masterChanged',nickname);
}

function writeChatLine(text, timeout){
    $("chat").innerHTML += "<br/>" + text;
    setTimeout(clearChat, timeout || 5000);
}

function clearChat()
{
    $("chat").innerHTML ="";
}

var storedUserInput = {m:0, t:0};
var sentUserInput = {m:0, t:0};
var minUserInputInterval = 50;
var lastUserInputTS = 0;
function sendUserInput(){
    if (sentUserInput.m == storedUserInput.m && sentUserInput.t == storedUserInput.t) {
        return;
    }
    var delta = new Date().valueOf() - lastUserInputTS;
    if (delta < minUserInputInterval) {
        setTimeout(sendUserInput, delta);
        return;
    }
    //console.log("send userinput");
    sentUserInput.m = storedUserInput.m;
    sentUserInput.t = storedUserInput.t;
    lastUserInputTS = new Date().valueOf();
    socket.emit('move',sentUserInput);

}
// bind keyboard events to game functions (movement, etc)
function bindKeys() {
	document.onkeydown = function(e) {
		e = e || window.event;
        switch (e.keyCode) { // which key was pressed?
			case 38: // up, move player forward, ie. increase speed
                storedUserInput.m=1;
				break;
            case 40: // down, move player backward, set negative speed
                storedUserInput.m=-1;
				break;
			case 37: // left, rotate player left
                storedUserInput.t=-1;
				break;
			case 39: // right, rotate player right
                storedUserInput.t=1;
				break;
		}
        sendUserInput();
	};

	document.onkeyup = function(e) {
		e = e || window.event;
        switch (e.keyCode) {
			case 38:
			case 40:
                storedUserInput.m=0;
				break;
			case 37:
			case 39:
                storedUserInput.t=0;
				break;
		}
        sendUserInput();
	};
}

setTimeout(init, 1);

</script>



</body>